x <- 2O
x <- 2L
Y <- 6P
x
0/0
dimmnames(x)
attributes(x)
y = "hello world"
attributes(y)
attributes("hello world")
y
?attributes
class(y)
f = c(TRUE, 2)
f
x = factor("yes", "no", "yes", "yes")
x
x = factor(c("yes", "no", "yes", "yes"))
x
unclass(x)
x
y = unclass(x)
y
y <- data.frame(a = 1, b = "a")
dput(y)
dput(y, file = "y.R")
newdata <- dget("y.R")
newdata
newdata <- dget("y.R")
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
install_from_swirl("R Programming")
1
swirl()
5 + 7
x <- 5 + 7
x
y <- x- 3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd(dir = "./testdir")
setwd("testdir")
setwd("~/")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename(from = "mytest.R", to = "mytest2.R")
file.copy(from = "mytest2.R", to = "mytest3.R")
file.path("mytest3.R")
file.path('folder1','folder2')
?dir.create
dir.create(file.path('testdir2','testdir3'))
dir.create("file.path('testdir2','testdir3')")
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
play()
dir.create("test1/test2")
dir.create("test1/test2", recursive = TRUE)
nxt()
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
9111/21613
log(16)
5/770
install.packages("devtools")
library(devtools)
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries','ramnathv')
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
install.packages("stringi",type="win.binary")
install.packages("stringi",type="win.binary")
install.packages("stringi",type="win.binary")
install_github('ramnathv/slidify')
library(devtools)
library(devtools)
install.packages("devtools")
library(devtools)
1/3
638/1000
install.packages("doMC")
install.packages("GGally")
0.75*0.30/(0.75*0.30+0.48*0.70)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
z <- x*w
mean(z)
data(mtcars)
library(ggplot2)
plot1 <- ggplot(mtcars, aes(x = factor(am), y = mpg)) + geom_violin()
plot1
library(ggplot2)
plot1 <- ggplot(mtcars, aes(x = factor(am), y = mpg))
plot1
plot1 <- ggplot(mtcars, aes(x = factor(am), y = mpg))
plot1
plot1 <- ggplot(mtcars, aes(x = factor(am), y = mpg)) + geom_violin()
plot1
lin1 <- lm(mpg ~ factor(am), data=mtcars)
summary(lin1)
m <- coef(summary(lin1))[2,1]
se <- coef(summary(lin1))[2,2]
m + c(-1,1)*qt(.975,30)*se # (n = 32 so n-2 = 30)
plot2 <- ggplot(mtcars, aes(x = factor(am), y = mpg, col = factor(cyl))) + geom_violin(aes(fill = factor(cyl)))
plot2
plot3 <- ggplot(mtcars, aes(x = wt, y = mpg, col = factor(gear))) + geom_point()
plot3
plot4 <- ggplot(mtcars, aes(x = disp, y = mpg, col = factor(carb))) + geom_point()
plot4
cor(mtcars)
par(mfrow=c(2,2))
plot(lin4)
lin2 <- lm(mpg ~ wt, data=mtcars)
lin3 <- lm(mpg ~ wt + qsec, data=mtcars)
lin4 <- lm(mpg ~ wt + qsec + factor(am), data=mtcars)
anova(lin2, lin3, lin4)
par(mfrow=c(2,2))
plot(lin4)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
lambda <- .2
sim <- 1000
n <- 40
library(ggplot2)
set.seed(0)
# We create a data frame with the first 1000 rows corresponding to the random exponentials, and the following 1000 rows corresponding to the averages of 40 exponentials.
data1 <- data.frame(
x = c(rexp(nosim,lambda), apply(matrix(rexp(nosim * n,lambda), nosim), 1, mean)),
what = factor(rep(c("Obs", "Averages"), c(nosim, nosim)))
)
# We plot the density function for the 2 sets, observation (random exponentials) and average (averages of 40 exponentials)
plot1 <- ggplot(dat1, aes(x = x, fill = what)) + geom_density(size = .5, alpha = .2)
plot1 <- plot1 + geom_vline(x = 1/lambda, size = 1, col = "blue")
plot1
library(ggplot2)
set.seed(0)
# We create a data frame with the first 1000 rows corresponding to the random exponentials, and the following 1000 rows corresponding to the averages of 40 exponentials.
data1 <- data.frame(
x = c(rexp(sim,lambda), apply(matrix(rexp(sim * n,lambda), sim), 1, mean)),
what = factor(rep(c("Obs", "Averages"), c(sim, sim)))
)
# We plot the density function for the 2 sets, observation (random exponentials) and average (averages of 40 exponentials)
plot1 <- ggplot(data1, aes(x = x, fill = what)) + geom_density(size = .5, alpha = .2)
plot1 <- plot1 + geom_vline(x = 1/lambda, size = 1, col = "blue")
plot1
plot1 <- ggplot(data1, aes(x = x, fill = what)) + geom_density(size = .5, alpha = .2)
plot1 <- plot1 + geom_vline(x = 1/lambda, size = 1, col = "red")
plot1
lambda <- .2
sim <- 1000
n <- 40
library(ggplot2)
set.seed(0)
# We create a data frame with the first 1000 rows corresponding to the random exponentials, and the following 1000 rows corresponding to the averages of 40 exponentials.
data1 <- data.frame(
x = c(rexp(sim,lambda), apply(matrix(rexp(sim * n,lambda), sim), 1, mean)),
what = factor(rep(c("Obs", "Averages"), c(sim, sim)))
)
# We plot the density function for the 2 sets, observation (random exponentials) and average (averages of 40 exponentials)
plot1 <- ggplot(data1, aes(x = x, fill = what)) + geom_density(size = .5, alpha = .2)
plot1 <- plot1 + geom_vline(x = 1/lambda, size = 1, col = "red")
plot1
x = c(rexp(sim,lambda), apply(matrix(rexp(sim * n,lambda), sim), 1, mean)),
x = c(rexp(sim,lambda), apply(matrix(rexp(sim * n,lambda), sim), 1, mean))
library(ggplot2)
set.seed(0)
# We create a data frame with the first 1000 rows corresponding to the random exponentials, and the following 1000 rows corresponding to the averages of 40 exponentials.
data1 <- data.frame(
x = c(rexp(sim,lambda), apply(matrix(rexp(sim * n,lambda), sim), 1, mean)),
what = factor(rep(c("Observation", "Averages"), c(sim, sim)))
)
# We plot the density function for the 2 sets, observation (random exponentials) and average (averages of 40 exponentials)
plot1 <- ggplot(data1, aes(x = x, fill = what)) + geom_density(size = .5, alpha = .2)
plot1 <- plot1 + geom_vline(x = 1/lambda, size = 1, col = "red")
plot1
library(ggplot2)
set.seed(0)
# We create a data frame with the first 1000 rows corresponding to the random exponentials, and the following 1000 rows corresponding to the averages of 40 exponentials.
data1 <- data.frame(
x = c(rexp(sim,lambda), apply(matrix(rexp(sim * n,lambda), sim), 1, mean)),
y = factor(rep(c("Observation", "Averages"), c(sim, sim)))
)
# We plot the density function for the 2 sets, observation (random exponentials) and average (averages of 40 exponentials)
plot1 <- ggplot(data1, aes(x = x, fill = y)) + geom_density(size = .5, alpha = .2)
plot1 <- plot1 + geom_vline(x = 1/lambda, size = 1, col = "red")
plot1
?aes
library(ggplot2)
set.seed(0)
# We create a data frame with the first 1000 rows corresponding to the random exponentials, and the following 1000 rows corresponding to the averages of 40 exponentials.
data1 <- data.frame(
m = c(rexp(sim,lambda), apply(matrix(rexp(sim * n,lambda), sim), 1, mean)),
w = factor(rep(c("Observation", "Averages"), c(sim, sim)))
)
# We plot the density function for the 2 sets, observation (random exponentials) and average (averages of 40 exponentials)
plot1 <- ggplot(data1, aes(x = m, fill = w)) + geom_density(size = .5, alpha = .2)
plot1 <- plot1 + geom_vline(x = 1/lambda, size = 1, col = "red")
plot1
plot1 <- ggplot(data1, aes(x = m, fill = w)) + geom_density(size = .5, alpha = .2)
plot1 <- plot1 + geom_vline(x = 1/lambda, size = 1, col = "red")
?geom_vline
plot1 <- ggplot(data1, aes(x = m, fill = w)) + geom_density(size = .5, alpha = .2)
plot1 <- plot1 + geom_vline(xintercept = 1/lambda, size = 1, col = "red")
plot1
plot1 <- ggplot(data1, aes(x = m, fill = w)) + geom_density(size = .5, alpha = .2)
plot1 <- plot1 + geom_vline(xintercept = 1/lambda, size = 1, col = "blue")
plot1
plot1 <- ggplot(data1, aes(x = m, fill = w)) + geom_density(size = .5, alpha = .2)
plot1 <- plot1 + geom_vline(xintercept = 1/lambda, size = 1, col = "blue")
plot1 <- plot1 + labs(title = "Density functions - Observation (random exponential), Averages (averages of 40 exponential)")
plot1
set.seed(0)
# We create a vector for x values from -5 to 5 by 0.01
vect <- seq(-5, 5, by = .01)
# We create a dataframe with values from the density function of the exponential distribution, dexp, for 4 different rates, to see the variability of the distribution depending on the variance( 1/ rate^2). We aslo add the x values to this dataframe and the variance value so that to make a separation into the plot according to this variance.
data2 <- data.frame(
y = c(
dexp(vect, rate = 0.1),
dexp(vect, rate = 0.5),
dexp(vect, rate = 1),
dexp(vect, rate = 2)
),
x = rep(vect, 4),
variance = factor(rep(c(100,4,1,0.25), rep(length(vect), 4)))
)
ggplot(data2, aes(x = x, y = y, color = variance)) + geom_line(size = 1) + labs(title = "Density function of exponential distribution with 4 different variances")
```
set.seed(0)
# We create a dataframe which contains the variances of 10 exponentials for the first 1000 rows, then the variances of 40 exponentials for the next 1000 rows, and finally the variances of 80 exponentals for the last 1000 rows. We associate those values with the factor n which enable to make a separation into the plot according to the number of exponentials averaged.
data3 <- data.frame(
x = c(apply(matrix(rexp(sim * 10,lambda), sim), 1, var),
apply(matrix(rexp(sim * 40,lambda), sim), 1, var),
apply(matrix(rexp(sim * 80,lambda), sim), 1, var)),
n = factor(rep(c("10", "40", "80"), c(sim, sim, sim)))
)
# We plot the density function for the 3 values of exponentials averaged, and we plot a line corresponding to the variance of the population.
ggplot(data3, aes(x = x, fill = n)) + geom_density(size = .5, alpha = .2) + geom_vline(xintercept = 1/(lambda^2), size = 1, col = "blue") + labs(title = "Density function for the 3 values of variances of exponentials compared to the population variance")
set.seed(0)
# We create a dataframe containing 1000 random exponentials for the first 1000 rows and the averages of 40 exponentials for the next 1000 rows.
data4 <- data.frame(
x = c(rexp(sim,lambda), apply(matrix(rexp(sim * n,lambda), sim), 1, mean)),
what = factor(rep(c("Observation", "Averages"), c(sim, sim)))
)
# we plot the histogram with the distinction between the 2 sets of values, and we plot the density function so that we can see the correspondance with the normal distribution
plot2 <- ggplot(data4, aes(x = x))
plot2 <- plot2 + geom_histogram(aes(y = ..density..), binwidth = .5) + geom_density(col = "blue", size = 1)
plot2 <- plot2 + facet_grid(.~ what)
plot2 <- plot2 + coord_cartesian(xlim = c(0, 10)) + labs(title = "Histogram and density function of observation (random exponential) and averages (averages of 40 exponentials)")
plot2
data("ToothGrowth")
average <- aggregate(len ~ supp + dose, data = ToothGrowth, mean)
library(ggplot2)
plot1 <- ggplot(data = average, aes(x = dose, y = len, col = supp)) + geom_line()
plot1
install.packages("manipulate")
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("plotly")
load("courseraData.rda")
library(plotly)
load("courseraData.rda")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
installed.packages("slidify")
?predict
?connections
library(tm)
#Creating corpus (required for tm package)
corpus_data <- Corpus(DirSource("C:/Users/steph_000.STEPHANIE/Documents/Moocs 2/Data science spe - JHU/10. Data science capstone/Coursera-SwiftKey/final/en_US/subset", encoding = "UTF-8"))
#Removing punctuation, numbers, whitespaces
corpus <- tm_map(corpus_data, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, stripWhitespace)
#Converting to lowercase
corpus <- tm_map(corpus, content_transformer(tolower))
corpus_data[[1]]$content[2]
corpus[[1]]$content[2]
setwd("~/Moocs 2/Data science spe - JHU/10. Data science capstone/Final Capstone")
shiny::runApp()
setwd("~/Moocs 2/Data science spe - JHU/10. Data science capstone/Milestone Report")
setwd("~/Moocs 2/Data science spe - JHU/10. Data science capstone/Next Word Prediction")
shiny::runApp()
install.packages("stilo")
install.packages("stylo")
shiny::runApp()
?txt.to.words.ext
?str_replace_all
shiny::runApp()
shiny::runApp()
